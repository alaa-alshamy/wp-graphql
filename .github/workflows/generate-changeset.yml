name: "Generate Changeset"

# Trigger on label being added or PR being approved
on:
  pull_request_target:
    types: [labeled]
  workflow_dispatch:
    inputs:
      PR_TITLE:
        description: "Title of the PR"
        required: true
        default: "feat: No title"
      PR_BODY:
        description: "Body of the PR"
        required: true
        default: "No body"
      PR_NUMBER:
        description: "Number of the PR"
        required: true
        default: "0"

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-changeset:
    # Only run if the PR is labeled with 'ready-for-changeset' or manually triggered
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request_target' &&
       contains(github.event.pull_request.labels.*.name, 'ready-for-changeset'))
    name: Generate Changeset
    runs-on: ubuntu-latest
    env:
      PR_TITLE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.PR_TITLE || github.event.pull_request.title }}
      PR_BODY: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.PR_BODY || github.event.pull_request.body }}
      PR_NUMBER: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.PR_NUMBER || github.event.pull_request.number }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Determine collection branch and target branch based on the PR's base branch
      COLLECTION_BRANCH: ${{ github.event.pull_request.base.ref == 'next-major' && 'changeset-beta' || 'changeset-collection' }}
      TARGET_BRANCH: ${{ github.event.pull_request.base.ref == 'next-major' && 'next-major' || 'develop' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      # Generate changeset using our script
      - name: Generate Changeset
        id: generate
        run: |
          # Use our generate-changeset.js script
          node scripts/generate-changeset.js

          # Check if any changesets were created
          if [ -z "$(ls -A .changeset/*.md 2>/dev/null)" ]; then
            echo "No changesets were generated. Creating a minimal one."

            # Create a minimal changeset if none exists
            mkdir -p .changeset

            # Get package name from package.json
            PACKAGE_NAME=$(node -p "console.log(require('./package.json').name)")

            # Use echo commands instead of heredoc with correct package name
            echo '---' > .changeset/minimal-changeset.md
            echo "\"$PACKAGE_NAME\": patch" >> .changeset/minimal-changeset.md
            echo '---' >> .changeset/minimal-changeset.md
            echo '' >> .changeset/minimal-changeset.md
            echo "PR #$PR_NUMBER: $PR_TITLE" >> .changeset/minimal-changeset.md
          fi

      # Set Git config
      - name: Set Git config
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

      # Check if collection branch exists, create if not
      - name: Check or create collection branch
        run: |
          if git ls-remote --heads origin $COLLECTION_BRANCH | grep -q $COLLECTION_BRANCH; then
            echo "Collection branch exists, checking out"
            git fetch origin $COLLECTION_BRANCH
            git checkout $COLLECTION_BRANCH
          else
            echo "Creating new collection branch"
            git checkout -b $COLLECTION_BRANCH
          fi

      # Add changeset to collection branch
      - name: Add changeset to collection
        run: |
          # Add and commit changes
          git add .changeset/*
          git commit -m "chore: add changeset for PR #$PR_NUMBER"
          git push origin $COLLECTION_BRANCH

      # Check or create collection PR
      - name: Check or create collection PR
        run: |
          # TARGET_BRANCH is now set at the job level to either 'develop' or 'next-major'
          echo "Using target branch: $TARGET_BRANCH"
          echo "Using collection branch: $COLLECTION_BRANCH"

          # Check if ANY PR already exists from this collection branch (regardless of target)
          PR_EXISTS=$(gh pr list --head "$COLLECTION_BRANCH" --json number | jq length)

          if [ "$PR_EXISTS" -eq "0" ]; then
            echo "Creating new collection PR"

            # Set title based on branch
            if [[ "$COLLECTION_BRANCH" == "changeset-beta" ]]; then
              PR_TITLE="Beta Changesets Collection"
              PR_BODY="This PR collects changesets for the next beta release."
              LABEL="beta-changeset-collection"
            else
              PR_TITLE="Changesets Collection"
              PR_BODY="This PR collects changesets from various merged PRs. When merged, it will trigger version updates based on the collected changesets."
              LABEL="changeset-collection"
            fi

            gh pr create \
              --base "$TARGET_BRANCH" \
              --head "$COLLECTION_BRANCH" \
              --title "$PR_TITLE" \
              --body "$PR_BODY" \
              --label "$LABEL"
          else
            echo "Collection PR already exists from branch $COLLECTION_BRANCH. Not creating a new one."

            # Optionally, we could update the existing PR with new commits
            echo "The existing PR will automatically include the new changesets."
          fi

      # Remove the label to prevent re-running
      - name: Remove label
        if: contains(github.event.pull_request.labels.*.name, 'ready-for-changeset')
        run: |
          gh pr edit $PR_NUMBER --remove-label "ready-for-changeset"
