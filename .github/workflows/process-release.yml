# This workflow has been consolidated into deploy-to-wordpress.yml
# The file is kept for reference but is no longer used.

name: Process Release

on:
  push:
    branches:
      - master
    paths:
      - ".changeset/**" # Only trigger when changesets are merged to master
  workflow_dispatch:
    inputs:
      skip_build:
        description: "Skip build process (for testing)"
        required: false
        default: "false"
      beta:
        description: "Create beta release"
        required: false
        default: "false"

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Dependencies
        run: npm ci

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, intl
          tools: composer

      - name: Install PHP dependencies
        run: composer install --no-dev --optimize-autoloader

      # Check current versions
      - name: Check Current Versions
        run: node scripts/check-versions.js

      # Determine if this is a beta release
      - name: Determine Release Type
        id: release_type
        run: |
          # Check if this is a manual beta release
          if [[ "${{ github.event.inputs.beta }}" == "true" ]]; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
          # Check if this came from next-major branch (for automated beta releases)
          elif git log -1 --pretty=%B | grep -q "Merge branch 'next-major'"; then
            echo "is_beta=true" >> $GITHUB_OUTPUT
          else
            echo "is_beta=false" >> $GITHUB_OUTPUT
          fi

      # Process changesets and create release
      - name: Process Changesets and Create Release
        id: changesets
        uses: changesets/action@v1
        with:
          version: npm run version
          publish: npm run release
          commit: "chore: version packages"
          title: "chore: version packages"
          # For beta releases, use the prerelease flag
          prerelease: ${{ steps.release_type.outputs.is_beta == 'true' && 'beta' || false }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Get the new version number
      - name: Get Version
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_beta=${{ steps.release_type.outputs.is_beta }}" >> $GITHUB_OUTPUT

      # Synchronize version numbers using our script
      - name: Synchronize Version Numbers
        run: |
          # Use our version-management.js script to update all version files
          node -e "
            const { updateVersions } = require('./scripts/version-management');
            updateVersions('${{ steps.get_version.outputs.version }}', ${{ steps.release_type.outputs.is_beta == 'true' }}).then(() => {
              console.log('âœ“ Version numbers synchronized to ${{ steps.get_version.outputs.version }}');
            }).catch(err => {
              console.error('Error:', err);
              process.exit(1);
            });
          "

      # Update @since tags
      - name: Update @since Tags
        run: node scripts/update-since-tags.js ${{ steps.get_version.outputs.version }}

      # Validate version numbers
      - name: Validate Version Numbers
        run: node scripts/check-versions.js

      # Commit the version changes
      - name: Commit Version Changes
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "chore: update version numbers and @since tags to ${{ steps.get_version.outputs.version }}"
          git push origin master

      # Build the plugin
      - name: Build Plugin
        run: |
          npm run build
          composer run-script zip

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ steps.release_type.outputs.is_beta == 'true' }}

      # Upload release asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./plugin-build/wp-graphql.zip
          asset_name: wp-graphql.zip
          asset_content_type: application/zip

      # Deploy to WordPress.org
      - name: WordPress Plugin Deploy
        uses: 10up/action-wordpress-plugin-deploy@stable
        env:
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SLUG: wp-graphql
