name: Release Management

on:
  # Using pull_request_target instead of pull_request for security reasons:
  # - Runs in the context of the BASE repository, not the fork
  # - Has access to repository secrets
  # - Can commit changes to protected branches
  # - SECURITY NOTE: Be careful when checking out PR code with this event type
  pull_request_target:
    types: [closed]
    branches:
      - master
  workflow_dispatch:
    inputs:
      release_type:
        description: "Force a specific release type (leave empty for auto-detection)"
        required: false
        type: choice
        options:
          - auto
          - major
          - minor
          - patch
        default: "auto"
      target_branch:
        description: "Target branch for manual release (usually develop)"
        required: false
        default: "develop"
      deploy_only:
        description: "Only deploy an existing tag (skip release creation)"
        required: false
        type: boolean
        default: false
      deploy_tag:
        description: "Specific tag to deploy (required if deploy_only is true)"
        required: false
        type: string
        default: ""
  schedule:
    # Run on the 1st and 15th of each month
    - cron: "0 0 1,15 * *"

jobs:
  prepare-release:
    # Add debug step before the condition
    if: |
      (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'develop') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_only != 'true') ||
      github.event_name == 'schedule'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_bump.outputs.version }}
      release_created: ${{ steps.create_release.outcome == 'success' || steps.handle_failure.outputs.release_exists == 'true' }}
    steps:
      - name: Debug workflow conditions
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event inputs: ${{ toJSON(github.event.inputs) }}"
          echo "Deploy only: ${{ github.event.inputs.deploy_only }}"
          echo "Target branch: ${{ github.event.inputs.target_branch }}"
          echo "Release type: ${{ github.event.inputs.release_type }}"
          echo "Current ref: ${{ github.ref }}"

      - name: Set checkout ref
        id: set_ref
        run: |
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
            echo "ref=master" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ref=${{ github.event.inputs.target_branch || 'develop' }}" >> $GITHUB_OUTPUT
          else
            echo "ref=develop" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          # For PR events, check out the master branch
          # For manual/scheduled events, check out the specified target branch or develop
          ref: ${{ steps.set_ref.outputs.ref }}
          # Use a personal access token with repo scope for better permissions
          token: ${{ secrets.REPO_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Check for changesets
        id: check_changesets
        run: |
          if [ -d ".changesets" ] && [ "$(ls -A .changesets)" ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
            echo "No changesets found. Proceeding with release without changesets."
          fi

      - name: Determine version bump
        id: version_bump
        run: |
          if [[ "${{ github.event.inputs.release_type }}" != "auto" && "${{ github.event.inputs.release_type }}" != "" ]]; then
            # Use the specified release type
            npm run version:bump -- --type=${{ github.event.inputs.release_type }}
          else
            # Auto-detect release type from changesets, or default to patch if none found
            if [[ "${{ steps.check_changesets.outputs.has_changesets }}" == "true" ]]; then
              npm run version:bump
            else
              npm run version:bump -- --type=patch
            fi
          fi

          # Get the new version after bump (using WPGRAPHQL_VERSION)
          NEW_VERSION=$(grep -oP "define\(\s*'WPGRAPHQL_VERSION',\s*'\K[^']+" constants.php)
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Update @since and deprecated version placeholders
        id: update_since_tags
        run: |
          # Run the since-tags update script with the new version to update @since and deprecated version placeholders
          npm run since-tags:update -- ${{ steps.version_bump.outputs.version }}

          # Check if summary file exists and has content
          if [ -f "/tmp/since-tags-summary.md" ]; then
            # Read the summary file
            SINCE_SUMMARY=$(cat /tmp/since-tags-summary.md)

            # Set the output without any encoding (we'll handle that in the release notes step)
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "summary<<EOF" >> $GITHUB_OUTPUT
            echo "$SINCE_SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      # Generate release notes BEFORE updating changelog or archiving changesets
      - name: Generate release notes
        id: release_notes
        run: |
          # Create a temporary directory outside the repository with proper permissions
          mkdir -p /tmp/release-notes
          chmod 777 /tmp/release-notes

          # Initialize release notes content
          RELEASE_NOTES="## Release Notes"
          RELEASE_NOTES="${RELEASE_NOTES}"$'\n\n'

          # Check if this is a PR from develop to master
          if [[ "${{ github.event_name }}" == "pull_request_target" && "${{ github.event.pull_request.head.ref }}" == "develop" ]]; then
            # Create a temporary file for the PR body
            # Use printf for safer handling of special characters and newlines
            printf "%s" '${{ github.event.pull_request.body }}' > /tmp/release-notes/pr_body.md

            # Process the PR body using sed instead of awk
            PR_CONTENT=$(sed -n '/^## Changelog/,/^This PR contains all changes/p' /tmp/release-notes/pr_body.md | \
              sed '/^This PR contains all changes/d' | \
              sed '/^### ðŸ”„ Pending `@since` Tag/,/^###/d')

            # For debugging
            echo "Extracted PR content:"
            echo "$PR_CONTENT"

            RELEASE_NOTES="${RELEASE_NOTES}${PR_CONTENT}"
          else
            # Generate release notes in markdown format for release body
            GENERATED_NOTES=$(npm run release:notes 2>/dev/null | grep -v "^>")
            if [[ -n "$GENERATED_NOTES" ]]; then
              RELEASE_NOTES="${RELEASE_NOTES}${GENERATED_NOTES}"
            fi
          fi

          # Add @since updates section if there are any
          if [[ "${{ steps.update_since_tags.outputs.has_updates }}" == "true" ]]; then
            # Store the summary in a variable with proper quoting
            SINCE_SUMMARY='${{ steps.update_since_tags.outputs.summary }}'
            RELEASE_NOTES="${RELEASE_NOTES}"$'\n\n'
            RELEASE_NOTES="${RELEASE_NOTES}${SINCE_SUMMARY}"
          fi

          # If no content was added (after all attempts), provide default message
          if [[ "${RELEASE_NOTES}" == "## Release Notes"$'\n\n' ]]; then
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              RELEASE_NOTES="${RELEASE_NOTES}This release was manually triggered with version bump type: ${{ github.event.inputs.release_type || 'auto' }}"
            elif [[ "${{ github.event_name }}" == "schedule" ]]; then
              RELEASE_NOTES="${RELEASE_NOTES}This is a scheduled release."
            else
              RELEASE_NOTES="${RELEASE_NOTES}This release was triggered by merging a PR from develop to master."
            fi

            RELEASE_NOTES="${RELEASE_NOTES}"$'\n\n'
            RELEASE_NOTES="${RELEASE_NOTES}No changesets were found for this release. This typically means:"$'\n'
            RELEASE_NOTES="${RELEASE_NOTES}- No features, fixes, or breaking changes were added, or"$'\n'
            RELEASE_NOTES="${RELEASE_NOTES}- The changes made did not require a changeset"
          fi

          # Save the release notes to a file that will be used by both the changelog update and release creation
          echo "$RELEASE_NOTES" > "$GITHUB_WORKSPACE/release_notes.md"

          # For debugging
          echo "Generated release notes:"
          cat "$GITHUB_WORKSPACE/release_notes.md"

          # Set the content for GitHub Actions output using jq to properly escape the content
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update changelogs
        run: |
          # First, check if this is a breaking change release by using our new script
          # This will automatically update the upgrade notice section if breaking changes are found
          npm run upgrade-notice:update -- --new-version=${{ steps.version_bump.outputs.version }} --notes-file="$GITHUB_WORKSPACE/release_notes.md"

          # Now update the changelogs using the same release notes
          npm run changelogs:update -- --new-version=${{ steps.version_bump.outputs.version }} --notes-file="$GITHUB_WORKSPACE/release_notes.md"

      - name: Commit and Merge Changes
        # Only run for PR merges or manual triggers that are NOT deploy-only
        if: (github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch') && github.event.inputs.deploy_only != 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Determine the working branch from the initial checkout ref
          # For pull_request_target, ref is 'master', but changes apply to 'develop' conceptually before merge.
          # Use 'develop' as the working branch for PR merges, and the input/default for others.
          WORKING_BRANCH="develop"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.target_branch }}" ]]; then
            WORKING_BRANCH="${{ github.event.inputs.target_branch }}"
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
             # Scheduled runs check out 'develop' according to set_ref
             WORKING_BRANCH="develop"
          elif [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
             # PR merges check out 'master' but the changes (version bump etc.) should be committed to develop first
             WORKING_BRANCH="develop"
          fi
          echo "Working branch for committing changes: $WORKING_BRANCH"

          # Fetch latest state
          git fetch origin $WORKING_BRANCH master

          # If triggered by PR merge, we are on master. We need to commit to develop first.
          if [[ "${{ github.event_name }}" == "pull_request_target" ]]; then
             echo "PR Merge detected. Checking out $WORKING_BRANCH to commit preparation changes..."
             # Stash changes made on master, checkout develop, apply stash, commit
             git stash push --include-untracked -m "Stashing prep changes"
             git checkout "$WORKING_BRANCH"
             git pull origin "$WORKING_BRANCH"
             # Check if stash exists before popping
             if git stash list | grep -q "Stashing prep changes"; then
               git stash pop || (echo "::warning::Applying stashed changes failed. Trying manual add." && git add . && git reset -- release_notes.md || true)
             else
               echo "::warning::No stash found. Assuming changes are already in working directory on $WORKING_BRANCH."
               git add .
               git reset -- release_notes.md || true
             fi
          else
             # For manual/scheduled, we should already be on WORKING_BRANCH
             CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
             if [[ "$CURRENT_BRANCH" != "$WORKING_BRANCH" ]]; then
               echo "::error::Expected to be on branch '$WORKING_BRANCH' but currently on '$CURRENT_BRANCH'. Aborting."
               exit 1
             fi
             # Ensure the branch is up-to-date
             git pull origin "$WORKING_BRANCH"
             # Stage changes made in previous steps
             git add .
             git reset -- release_notes.md || true
          fi

          # Commit the changes to the WORKING_BRANCH if any exist
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Committing preparation changes to $WORKING_BRANCH..."
            git commit -m "release: prepare v${{ steps.version_bump.outputs.version }}"
            echo "Pushing changes to $WORKING_BRANCH..."
            # Add retry logic for push
            MAX_RETRIES=3
            RETRY_COUNT=0
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin "$WORKING_BRANCH"; then
                echo "Successfully pushed $WORKING_BRANCH"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT+1))
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "::error::Failed to push $WORKING_BRANCH after $MAX_RETRIES attempts"
                  exit 1
                fi
                echo "::warning::Push to $WORKING_BRANCH failed, pulling and retrying... (attempt $RETRY_COUNT of $MAX_RETRIES)"
                git pull origin "$WORKING_BRANCH" --rebase # Try to rebase local commit onto remote changes
                sleep 5
              fi
            done
          else
            echo "No changes to commit to $WORKING_BRANCH."
          fi

          # --- Merge to Master (only if working branch is not master) ---
          if [[ "$WORKING_BRANCH" != "master" ]]; then
            echo "Checking out master branch..."
            git checkout master
            # Pull master only if it exists remotely, otherwise it might be the first release
            if git show-ref --verify --quiet refs/remotes/origin/master; then
                git pull origin master
            fi

            echo "Merging $WORKING_BRANCH into master..."
            # Use the commit from the remote working branch to avoid potential local divergence
            git merge "origin/$WORKING_BRANCH" --no-ff -m "release: merge $WORKING_BRANCH into master for v${{ steps.version_bump.outputs.version }}"

            echo "Pushing changes to master..."
            git push origin master
          else
             echo "Working branch is master. Skipping merge."
             # Ensure master is pushed if changes were committed directly to it
             # Check if the commit was actually made in this run
             if git log -1 --pretty=%B | grep -q "release: prepare v${{ steps.version_bump.outputs.version }}"; then
                echo "Pushing changes to master..."
                git push origin master
             fi
          fi

      # Tagging should happen AFTER the commit/merge step, on the master branch
      - name: Create and push tag
        # Run after commit/merge, using the same condition
        if: (github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch') && github.event.inputs.deploy_only != 'true'
        run: |
          # Ensure we are on master branch before tagging
          if [[ "$(git rev-parse --abbrev-ref HEAD)" != "master" ]]; then
             echo "Checking out master branch before tagging..."
             git checkout master
             # Ensure master is up-to-date locally with remote after potential merge/push
             git pull origin master
          fi

          echo "Attempting to tag commit $(git rev-parse HEAD) on branch $(git rev-parse --abbrev-ref HEAD)"

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          TAG_NAME="v${{ steps.version_bump.outputs.version }}"

          # Check if tag already exists locally or remotely
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1 || git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
            echo "Tag $TAG_NAME already exists. Skipping tag creation."
          else
            # Create an annotated tag using the generated release notes
            echo "Creating annotated tag $TAG_NAME..."
            # Use the release notes file for the tag message
            if [ -f "$GITHUB_WORKSPACE/release_notes.md" ]; then
              # Ensure release notes content doesn't break the command
              # Using -F reads the message from the file
               git tag -a "$TAG_NAME" -F "$GITHUB_WORKSPACE/release_notes.md"
            else
               echo "::warning:: release_notes.md not found. Creating tag with generic message."
               git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
            fi

            # Push the tag
            echo "Pushing tag $TAG_NAME..."
            git push origin "$TAG_NAME"
          fi

      - name: Create GitHub Release
        if: github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        id: create_release
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_PAT }}
        with:
          tag_name: v${{ steps.version_bump.outputs.version }}
          release_name: Release v${{ steps.version_bump.outputs.version }}
          body_path: ${{ github.workspace }}/release_notes.md
          draft: false
          prerelease: false

      - name: Handle release creation failure
        if: (github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch') && steps.create_release.outcome == 'failure'
        id: handle_failure
        run: |
          echo "Failed to create release. This could be because the tag already exists."
          echo "Checking if release exists..."

          RELEASE_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.REPO_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.version_bump.outputs.version }}")

          if [[ "$RELEASE_EXISTS" == "200" ]]; then
            echo "Release for v${{ steps.version_bump.outputs.version }} already exists. Marking as successful."
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release creation failed for an unknown reason."
            echo "release_exists=false" >> $GITHUB_OUTPUT

            # Check for rate limiting
            RATE_LIMIT=$(curl -s \
              -H "Authorization: token ${{ secrets.REPO_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/rate_limit")

            REMAINING=$(echo "$RATE_LIMIT" | jq -r '.resources.core.remaining')
            RESET_TIME=$(echo "$RATE_LIMIT" | jq -r '.resources.core.reset')
            RESET_TIME_HUMAN=$(date -d @$RESET_TIME)

            if [[ "$REMAINING" -le 10 ]]; then
              echo "::warning::GitHub API rate limit is low: $REMAINING requests remaining. Resets at $RESET_TIME_HUMAN"
            fi

            # Try again with a different approach
            echo "Attempting to create release using GitHub CLI..."

            # Install GitHub CLI if not already installed
            if ! command -v gh &> /dev/null; then
              echo "Installing GitHub CLI..."
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable master" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
              sudo apt update
              sudo apt install gh
            fi

            # Authenticate with GitHub CLI
            echo "${{ secrets.REPO_PAT }}" | gh auth login --with-token

            # Verify the release notes file exists
            if [ -f "${{ github.workspace }}/release_notes.md" ]; then
              echo "Using release notes from workspace:"
              cat "${{ github.workspace }}/release_notes.md"

              # Try to create the release with GitHub CLI
              if gh release create "v${{ steps.version_bump.outputs.version }}" \
                --title "Release v${{ steps.version_bump.outputs.version }}" \
                --notes-file "${{ github.workspace }}/release_notes.md"; then
                echo "Successfully created release using GitHub CLI"
                echo "release_exists=true" >> $GITHUB_OUTPUT
              else
                echo "::error::Failed to create release using GitHub CLI with notes file."

                # Try one more time with inline notes from the output
                echo "Trying with inline notes..."
                if gh release create "v${{ steps.version_bump.outputs.version }}" \
                  --title "Release v${{ steps.version_bump.outputs.version }}" \
                  --notes "${{ steps.release_notes.outputs.content }}"; then
                  echo "Successfully created release using GitHub CLI with inline notes"
                  echo "release_exists=true" >> $GITHUB_OUTPUT
                else
                  echo "::error::Failed to create release using all methods. Please check logs for details."
                  echo "release_exists=false" >> $GITHUB_OUTPUT
                  exit 1
                fi
              fi
            else
              echo "Release notes file not found in workspace. Using inline notes..."
              # Try with inline notes
              if gh release create "v${{ steps.version_bump.outputs.version }}" \
                --title "Release v${{ steps.version_bump.outputs.version }}" \
                --notes "${{ steps.release_notes.outputs.content }}"; then
                echo "Successfully created release using GitHub CLI with inline notes"
                echo "release_exists=true" >> $GITHUB_OUTPUT
              else
                echo "::error::Failed to create release using all methods. Please check logs for details."
                echo "release_exists=false" >> $GITHUB_OUTPUT
                exit 1
              fi
            fi
          fi

      # Add a cleanup step to ensure temporary files are removed
      # This step runs AFTER the GitHub release is created
      - name: Cleanup temporary files
        if: always()
        run: |
          # Check if the temporary directory exists before attempting to remove it
          if [ -d "/tmp/release-notes" ]; then
            echo "Cleaning up temporary files..."
            rm -rf /tmp/release-notes
            echo "Temporary files removed."
          else
            echo "No temporary files to clean up."
          fi

          # Also remove the release notes file from the workspace
          # This prevents it from being versioned in the repository
          if [ -f "$GITHUB_WORKSPACE/release_notes.md" ]; then
            echo "Removing release notes file from workspace..."
            rm -f "$GITHUB_WORKSPACE/release_notes.md"
            echo "Workspace release notes file removed."
          fi

      - name: Delete processed changesets
        # Only delete changesets if the release was successful or already exists
        if: (github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch') && (steps.create_release.outcome == 'success' || steps.handle_failure.outputs.release_exists == 'true')
        run: |
          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # We should be on master after tagging. Need to commit deletion to master.
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          if [[ "$CURRENT_BRANCH" != "master" ]]; then
             echo "Checking out master to delete changesets..."
             git checkout master
             git pull origin master
          fi

          # Check if the .changesets directory exists and contains files
          if [ -d ".changesets" ] && [ "$(find .changesets -type f -name "*.md" | wc -l)" -gt 0 ]; then
            # List all changesets before deleting (for logging purposes)
            echo "Changesets found in directory:"
            ls -la .changesets/

            # Remove all .md files in the .changesets directory
            find .changesets -type f -name "*.md" -exec rm -f {} \;

            # Check if any files were removed
            if [ $? -eq 0 ]; then
              echo "Changesets removed successfully"

              # Stage the deletions
              git add -A .changesets/

              # Also make sure the release_notes.md file is not staged
              git reset -- release_notes.md || true

              # Commit the deleted changesets
              # Check if there's anything to commit first
              if [[ -n "$(git status --porcelain)" ]]; then
                git commit -m "chore: delete changesets after release v${{ steps.version_bump.outputs.version }}"
                git push origin master # Push deletion commit to master

                echo "Deleted changesets committed and pushed to master for v${{ steps.version_bump.outputs.version }}"
              else
                 echo "No changesets staged for deletion commit."
              fi

            else
              echo "Error removing changesets"
              exit 1
            fi
          else
            echo "No changeset files found to delete"
          fi

      - name: Update develop branch
        if: github.event_name == 'pull_request_target' || github.event_name == 'workflow_dispatch'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Fetch all branches
          git fetch --unshallow || git fetch
          # Fetch latest changes for master and develop
          git fetch origin master develop

          # Checkout develop branch
          echo "Checking out develop..."
          git checkout develop
          git pull origin develop

          # Merge master into develop with a descriptive message
          echo "Merging master back into develop..."
          git merge --no-ff origin/master -m "chore: sync master back to develop after release v${{ steps.version_bump.outputs.version }} [skip ci]"

          # Push changes to develop
          echo "Pushing updated develop branch..."
          git push origin develop

          echo "Successfully synced master back to develop branch"

  deploy-wordpress:
    # Only need prepare-release if we're not doing a deploy-only run
    needs: prepare-release
    # Run this job if:
    # 1. prepare-release job was successful and created/found a release
    # 2. OR if we're doing a manual deploy of an existing tag
    if: |
      always() &&
      (
        (needs.prepare-release.result == 'success' && needs.prepare-release.outputs.release_created == 'true') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_only == 'true' && github.event.inputs.deploy_tag != '')
      )
    name: Deploy to WordPress.org
    runs-on: ubuntu-latest
    steps:
      - name: Determine tag to deploy
        id: get_tag
        run: |
          if [[ "${{ github.event.inputs.deploy_only }}" == "true" ]]; then
            echo "tag=${{ github.event.inputs.deploy_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=v${{ needs.prepare-release.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_tag.outputs.tag }}
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, intl
          tools: composer

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Subversion
        run: sudo apt-get update && sudo apt-get install -y subversion

      - name: Install PHP dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Install Node dependencies and build
        run: |
          npm ci
          npm run build

      - name: WordPress Plugin Deploy
        uses: 10up/action-wordpress-plugin-deploy@stable
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SLUG: wp-graphql
          VERSION: ${{ steps.get_tag.outputs.tag }}

      - name: Create artifact directory
        run: |
          mkdir -p plugin-build

      - name: Create plugin artifact
        run: |
          composer run-script zip

      - name: Upload artifact to workflow
        uses: actions/upload-artifact@v4
        with:
          name: wp-graphql
          path: plugin-build/wp-graphql.zip

      - name: Upload artifact to release
        # Only upload to release if we're not doing a manual deploy
        if: github.event.inputs.deploy_only != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          files: plugin-build/wp-graphql.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
